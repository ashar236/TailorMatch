[
    {
        "name": "simple generation",
        "message": "Please generate similar examples for enitity matching. The results should only be presented as JSON containing the generated entity, one and entity two as well as information if they are a match or not represented by boolean and value. Only return JSON.Generate one match and three non matches. The example that was misclassified is: Entity 1: {product_1} Entity 2: {product_2} Label: {label}}"
    },
    {
        "name": "textual generation",
        "message": "I'm currently testing large language, models on the task of entity matching. In this context, I am first fine-tuning them, and then testing their weaknesses and strengths. The example I will show you is wrongly classified by the model and that idea is to generate four new examples three of which should be negative, i.e. non-matches, and one of them match. For context, two products are considered to be a match if the two entity descriptions refer to the same real world entity. This does not mean that the descriptions need to be the same but that the entity the decription refers to needs to match. Secondly products are not a match if the two descriptions refer to different products.  As a model has previously made an error on these two entity descriptions it is important to create examples that present a similar challenge. Please focus on corner cases meaning examples that are quite difficult to get correct. The generated examples should belong to the same category as the presented product and should be very similar to it. However even if they are a match the strings should never match exactly. The results should only be presented as JSON containing the generated entity, one and entity two as well as information if they are a match or not represented by boolean and value. Only return JSON. The example that was misclassified is: Entity 1: {product_1} Entity 2: {product_2} Label: {label}}"
    },
    {
        "name": "textual generation examples",
        "message": "I'm currently testing large language, models on the task of entity matching. In this context, I am first fine-tuning them, and then testing their weaknesses and strengths. The example I will show you is wrongly classified by the model and that idea is to generate four new examples three of which should be negative, i.e. non-matches, and one of them match. For context, two products are considered to be a match if the two entity descriptions refer to the same real world entity. This does not mean that the descriptions need to be the same but that the entity the decription refers to needs to match. Secondly products are not a match if the two descriptions refer to different products.  As a model has previously made an error on these two entity descriptions it is important to create examples that present a similar challenge. Please focus on corner cases meaning examples that are quite difficult to get correct. The generated examples should belong to the same category as the presented product and should be very similar to it. However even if they are a match the strings should never match exactly. The results should only be presented as JSON containing the generated entity, one and entity two as well as information if they are a match or not represented by boolean and value. Only return JSON. Here are some relevant examples: {examples} The example that was misclassified is: Entity 1: {product_1} Entity 2: {product_2} Label: {label}}"
    }
]